import subprocess
import os
import re
import time
from flask import Flask, request, jsonify
from openai import OpenAI
import httpx

os.environ.pop("HTTP_PROXY", None)
os.environ.pop("HTTPS_PROXY", None)
os.environ.pop("http_proxy", None)
os.environ.pop("https_proxy", None)

# üõ°Ô∏è –°–æ–∑–¥–∞—ë–º httpx –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏
no_proxy_client = httpx.Client()

# üß† –°–æ–∑–¥–∞—ë–º OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(
    api_key=os.environ.get("OPENAI_API_KEY"),
    http_client=no_proxy_client
)

ASSISTANT_ID = os.environ.get("ASSISTANT_ID")

app = Flask(__name__)

@app.route("/generate", methods=["POST"])
def generate():
    print("üì• POST-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –Ω–∞ /generate")
    
    try:
        data = request.get_json()
        if not data:
            with open("incoming_chunks_debug.log", "a", encoding="utf-8") as f:
                f.write(f"\n‚ùó –ù–µ—Ç JSON-–¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
            return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400
            
        chunks = data.get("chunks", [])

        with open("incoming_chunks_debug.log", "a", encoding="utf-8") as f:
            f.write(f"\n=== –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {time.strftime('%Y-%m-%d %H:%M:%S')} ===\n")
            f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}\n")
            for i, chunk in enumerate(chunks):
                f.write(f"--- –ß–∞–Ω–∫ {i} ---\n")
                f.write(chunk[:1000] + "\n...\n")  # –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
            

        print("üì• POST-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –Ω–∞ /generate")
        print("=== üß© –ü–û–õ–£–ß–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –û–¢ –°–ï–†–í–ï–†–ê ===")
        print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
        total_size = 0
        for i, ch in enumerate(chunks):
            ch_len = len(ch.encode('utf-8'))
            total_size += ch_len
            print(f"üîπ –ß–∞–Ω–∫ {i}: {ch_len} –±–∞–π—Ç")
        print(f"üìè –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤: {total_size} –±–∞–π—Ç")
        print("=== üîö ===\n")

        with open("render_debug.log", "a", encoding="utf-8") as f:
            f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω, —á–∞–Ω–∫–æ–≤: {len(chunks)}, —Ä–∞–∑–º–µ—Ä: {total_size} –±–∞–π—Ç\n")

        print("=== DISTRICT SEO BOT | –ê–ù–ê–õ–ò–ó –ß–ê–ù–ö–û–í ===")
        total_chars = 0
        for i, chunk in enumerate(chunks, 1):
            chunk_text = str(chunk)
            chunk_len = len(chunk_text)
            total_chars += chunk_len
            print(f"--- –ß–∞–Ω–∫ {i}: {chunk_len} —Å–∏–º–≤–æ–ª–æ–≤ ---")
        print(f"–û–±—â–∏–π –æ–±—ä—ë–º –¥–∞–Ω–Ω—ã—Ö: {total_chars} —Å–∏–º–≤–æ–ª–æ–≤ ({total_chars / 1024:.2f} –ö–ë)")
        print("=== –ö–û–ù–ï–¶ –ê–ù–ê–õ–ò–ó–ê –ß–ê–ù–ö–û–í ===")

        cleaned_chunks = []
        for chunk in chunks:
            cleaned = re.sub(r'^https?://\S+\.(?:jpg|jpeg|png|gif)\s*$', '', chunk, flags=re.MULTILINE)
            cleaned_chunks.append(cleaned.strip())

        prompt = "\n\n".join(cleaned_chunks)

        print(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ {len(cleaned_chunks)} —á–∞–Ω–∫–æ–≤ –Ω–∞ OpenAI")
        print(f"üìè –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {len(prompt.encode('utf-8'))} –±–∞–π—Ç")

        print("üîÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞")
        thread = client.beta.threads.create()

        print("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Ç–æ–∫")
        client.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=prompt
        )

        print("üöÄ –ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
        run = client.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=ASSISTANT_ID,
            extra_headers={"OpenAI-Beta": "assistants=v2"}
        )

        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
        while True:
            run_status = client.beta.threads.runs.retrieve(
                thread_id=thread.id,
                run_id=run.id
            )
            if run_status.status == "completed":
                print("‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
                break
            elif run_status.status == "failed":
                raise Exception("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –∑–∞–¥–∞—á–µ–π.")
            time.sleep(1)

        print("üì¨ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
        messages = client.beta.threads.messages.list(thread_id=thread.id)
        content = messages.data[0].content[0].text.value.strip()

        print("=== üì• –û–¢–í–ï–¢ –û–¢ OPENAI ===")
        print(content[:1000] + "\n...")  # –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤
        print("=== üîö ===")
        

        def extract_block(tag):
            match = re.search(rf"==={tag}===\s*(.+?)(?=(?:===|$))", content, re.DOTALL)
            return match.group(1).strip() if match else ""

        result = {
            "element_name": extract_block("ELEMENT_NAME"),
            "meta_title": extract_block("META_TITLE"),
            "meta_keywords": extract_block("META_KEYWORDS"),
            "meta_description": extract_block("META_DESCRIPTION"),
            "article": extract_block("ARTICLE")
        }

        return jsonify(result)

    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    print("üü¢ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã...")
    app.run(host="0.0.0.0", port=10000)
