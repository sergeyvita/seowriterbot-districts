import os
import json
import time
import re
import logging
from flask import Flask, request, jsonify
from openai import OpenAI
import httpx

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤—ã–≤–æ–¥–∏—Ç—å –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(level=logging.DEBUG)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ DEBUG
logger = logging.getLogger(__name__)  # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä

# –£–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
os.environ.pop("HTTP_PROXY", None)
os.environ.pop("HTTPS_PROXY", None)

client = OpenAI(
    api_key=os.environ.get("OPENAI_API_KEY"),
    http_client=httpx.Client()
)

ASSISTANT_ID = os.environ.get("ASSISTANT_ID")
app = Flask(__name__)

@app.route("/upload", methods=["POST"])
def upload_file():
    try:
        uploaded_file = request.files.get('file')
        if not uploaded_file or uploaded_file.filename == "":
            logger.error("–§–∞–π–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω")
            return jsonify({"error": "–§–∞–π–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω"}), 400

        temp_path = f"/tmp/{int(time.time())}_{uploaded_file.filename}"
        uploaded_file.save(temp_path)

        with open(temp_path, "rb") as f:
            contents = f.read(200)
            logger.debug(f"üîç –ü–µ—Ä–≤—ã–µ 200 –±–∞–π—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞: {contents[:200]}")
            file_response = client.files.create(file=f, purpose="assistants")

        os.remove(temp_path)
        logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file_response.id}")

        return jsonify({"file_id": file_response.id})

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ upload_file(): {e}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "details": str(e)}), 500



@app.route("/generate", methods=["POST"])
def generate():
    try:
        logger.info("üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ /generate")

        init = request.values.get("init", "false").lower() == "true"
        delete_file = request.form.get("delete", "false").lower() == "true"
        prompt = request.form.get("prompt", "").strip()
        thread_id = request.form.get("thread_id", "").strip()
        file_id = request.form.get("file_id", "").strip()

        if init:
            uploaded_files = []
            for i in range(20):  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 20 —Ñ–∞–π–ª–æ–≤ context_file[0]...context_file[19]
                file_key = f"context_file[{i}]"
                if file_key in request.files:
                    uploaded_files.append(request.files[file_key])
        


            if not uploaded_files:
                logger.error("–§–∞–π–ª—ã context_file[] –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã")
                return jsonify({"error": "–§–∞–π–ª—ã context_file[] –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã"}), 400

            file_ids = []

            for i, uploaded_file in enumerate(uploaded_files):
                if uploaded_file.filename == "":
                    continue

                temp_path = f"/tmp/{int(time.time())}_{i}_{uploaded_file.filename}"
                uploaded_file.save(temp_path)

                with open(temp_path, "rb") as f:
                    file_response = client.files.create(file=f, purpose="assistants")

                file_ids.append(file_response.id)
                logger.info(f"üìé –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file_response.id}")
                os.remove(temp_path)

            if not file_ids:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª")
                return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª"}), 500

            thread = client.beta.threads.create()
            logger.info(f"üßµ Thread —Å–æ–∑–¥–∞–Ω: {thread.id}")

            return jsonify({"thread_id": thread.id, "file_id": file_ids[0]})

        # === –≠—Ç–∞–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ ===
        if not thread_id or not file_id:
            logger.error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω thread_id –∏–ª–∏ file_id")
            return jsonify({"error": "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω thread_id –∏–ª–∏ file_id"}), 400

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ thread {thread_id} —Å file_id={file_id} –∏ prompt={prompt}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º prompt —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Ñ–∞–π–ª—É
        client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=prompt,
            attachments=[{"file_id": file_id, "tools": [{"type": "file_search"}]}]
        )
        logger.info(f"üì® Prompt –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ thread {thread_id}")

        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if delete_file:
            try:
                client.files.delete(file_id)
                logger.info(f"üßπ –§–∞–π–ª {file_id} —É–¥–∞–ª—ë–Ω")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_id}: {e}")
                return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"}), 500

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        run = client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=ASSISTANT_ID,
            extra_headers={"OpenAI-Beta": "assistants=v2"}
        )

        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            try:
                run_status = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å –ø–æ—Ç–æ–∫–∞: {run_status.status}")
                if run_status.status == "completed":
                    break
                elif run_status.status == "failed":
                    logger.error("–ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.")
                    return jsonify({"error": "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è"}), 500
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Ç–æ–∫–∞: {e}")
                return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Ç–æ–∫–∞: {str(e)}"}), 500

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        messages = client.beta.threads.messages.list(thread_id=thread_id)
        content = ""
        for msg in messages.data:
            for item in msg.content:
                if hasattr(item, "text") and hasattr(item.text, "value"):
                    content += item.text.value.strip() + "\n"

        logger.info("üì¶ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–±–æ—Ä")

        def extract_block(tag, text):
            match = re.search(rf"==={tag}===\s*(.+?)(?=(?:===|$))", text, re.DOTALL)
            return match.group(1).strip() if match else ""

        result = {
            "element_name": extract_block("ELEMENT_NAME", content),
            "meta_title": extract_block("META_TITLE", content),
            "meta_keywords": extract_block("META_KEYWORDS", content),
            "meta_description": extract_block("META_DESCRIPTION", content),
            "article": extract_block("ARTICLE", content) or content.strip()
        }

        return jsonify(result)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate(): {e}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "details": str(e)}), 500

@app.route("/delete_file", methods=["POST"])
def delete_file():
    try:
        data = request.get_json(force=True)   # –∂–¥—ë–º JSON: {"file_id": "file‚Äëabc123"}
        file_id = data.get("file_id", "").strip()

        if not file_id:
            return jsonify({"error": "file_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}), 400

        client.files.delete(file_id)           # —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ
        logger.info(f"üóëÔ∏è  –§–∞–π–ª {file_id} —É–¥–∞–ª—ë–Ω")

        return jsonify({"status": "ok"}), 200

    except Exception as e:
        logger.error(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_id}: {e}")
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
