import subprocess
import os
import re
import time
from flask import Flask, request, jsonify
from openai import OpenAI
import httpx

os.environ.pop("HTTP_PROXY", None)
os.environ.pop("HTTPS_PROXY", None)
os.environ.pop("http_proxy", None)
os.environ.pop("https_proxy", None)

# üó≠Ô∏è –°–æ–∑–¥–∞—ë–º httpx –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏
no_proxy_client = httpx.Client()

# üß† –°–æ–∑–¥–∞—ë–º OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(
    api_key=os.environ.get("OPENAI_API_KEY"),
    http_client=no_proxy_client
)

ASSISTANT_ID = os.environ.get("ASSISTANT_ID")

app = Flask(__name__)

@app.route("/generate", methods=["POST"])
def generate():
    print("üì• POST-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –Ω–∞ /generate")

    try:
        data = request.get_json(force=True)
    except Exception as e:
        with open("incoming_chunks_debug.log", "a", encoding="utf-8") as f:
            f.write(f"\n‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {str(e)} ‚Äî {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON"}), 400
        
        if not data:
            with open("incoming_chunks_debug.log", "a", encoding="utf-8") as f:
                f.write(f"\n‚ùóÔ∏è –ù–µ—Ç JSON-–¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
            return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400

        chunks = data.get("chunks", [])

        generated_blocks = {
            "element_name": "",
            "meta_title": "",
            "meta_keywords": "",
            "meta_description": "",
            "article_parts": []
        }

        accumulated_article = ""

        chunks = [c for c in chunks if isinstance(c, str) and c.strip()]
        if not chunks:
            return jsonify({"error": "–í—Å–µ —á–∞–Ω–∫–∏ –±—ã–ª–∏ –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏"}), 400

        for i, chunk in enumerate(chunks):
            print(f"\nüîÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —á–∞–Ω–∫–∞ {i}")
            thread = client.beta.threads.create()

            if i == 0:
                system_prompt = (
                    "–≠—Ç–æ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å. –ù–∞—á–Ω–∏ —Å—Ç–∞—Ç—å—é —è—Ä–∫–æ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ. –ù–µ –∑–∞–≤–µ—Ä—à–∞–π —Å—Ç–∞—Ç—å—é. –î–∞–ª—å—à–µ –±—É–¥—É—Ç –µ—â–µ —á–∞—Å—Ç–∏."
                )
            elif i == len(chunks) - 1:
                system_prompt = (
                    "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å. –í–æ—Ç —á—Ç–æ —É–∂–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ: \n\n" + accumulated_article +
                    "\n\nüîπ –ó–∞–≤–µ—Ä—à–∏ —Å—Ç–∞—Ç—å—é –ª–æ–≥–∏—á–Ω–æ, —Å–¥–µ–ª–∞–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥."
                )
            else:
                system_prompt = (
                    "–ü—Ä–æ–¥–æ–ª–∂–∏ —Å—Ç–∞—Ç—å—é —Å —É—á—ë—Ç–æ–º —Ç–æ–≥–æ, —á—Ç–æ –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ —Ä–∞–Ω–µ–µ: \n\n" + accumulated_article +
                    "\n\nüîπ –ù–µ –¥–µ–ª–∞–π –≤—ã–≤–æ–¥–æ–≤. –°—Ç–∞—Ç—å—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è."
                )

            print(f"üìÑ –ß–∞–Ω–∫ {i}: {chunk[:200]}...\n")

            client.beta.threads.messages.create(
                thread_id=thread.id,
                role="user",
                content=system_prompt + "\n\n" + chunk
            )

            print("üöÄ –ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
            run = client.beta.threads.runs.create(
                thread_id=thread.id,
                assistant_id=ASSISTANT_ID,
                extra_headers={"OpenAI-Beta": "assistants=v2"}
            )

            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
            while True:
                run_status = client.beta.threads.runs.retrieve(
                    thread_id=thread.id,
                    run_id=run.id
                )
                if run_status.status == "completed":
                    print("‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
                    break
                elif run_status.status == "failed":
                    raise Exception(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –∑–∞–¥–∞—á–µ–π –¥–ª—è —á–∞–Ω–∫–∞ {i}")
                time.sleep(1)

            print("üì¨ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
            messages = client.beta.threads.messages.list(thread_id=thread.id)
            if not messages.data or not messages.data[0].content:
                raise Exception(f"–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —á–∞–Ω–∫ {i}")
            # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            content = ""
            for msg in messages.data:
                for item in msg.content:
                    if hasattr(item, "text") and hasattr(item.text, "value"):
                        content_candidate = item.text.value.strip()
                        if "ARTICLE" in content_candidate or "ELEMENT_NAME" in content_candidate:
                            content = content_candidate
                            break
                    if content:
                        break

            with open("debug_chunks_output.log", "a", encoding="utf-8") as f:
                f.write(f"\n=== –ß–∞–Ω–∫ {i} ===\n{content[:1000]}\n...\n")

            def extract_block(tag, text):
                match = re.search(rf"==={tag}===\s*(.+?)(?=(?:===|$))", text, re.DOTALL)
                return match.group(1).strip() if match else ""

            if i == 0:
                generated_blocks["element_name"] = extract_block("ELEMENT_NAME", content)
                generated_blocks["meta_title"] = extract_block("META_TITLE", content)
                generated_blocks["meta_keywords"] = extract_block("META_KEYWORDS", content)
                generated_blocks["meta_description"] = extract_block("META_DESCRIPTION", content)
                article_part = extract_block("ARTICLE", content)
            else:
                article_part = extract_block("ARTICLE", content)

            generated_blocks["article_parts"].append(article_part)
            
            # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π —á–∞–Ω–∫ (index 1) –≤ accumulated_article
            if i != 1:
                accumulated_article += "\n\n" + article_part

            time.sleep(5)

        print("=== üìÖ –û–¢–í–ï–¢ –û–¢ OPENAI ===")
        print(content[:1000] + "\n...")
        print("=== üñö ===")

        result = {
            "element_name": generated_blocks["element_name"],
            "meta_title": generated_blocks["meta_title"],
            "meta_keywords": generated_blocks["meta_keywords"],
            "meta_description": generated_blocks["meta_description"],
            "article": "\n\n".join(generated_blocks["article_parts"])
        }

        with open("render_debug.log", "a", encoding="utf-8") as f:
            f.write(f"\n=== –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç {time.strftime('%Y-%m-%d %H:%M:%S')} ===\n")
            f.write(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['element_name']}\n")
            f.write(f"META TITLE: {result['meta_title']}\n")
            f.write(f"META DESC: {result['meta_description']}\n")
            f.write(f"META KEYS: {result['meta_keywords']}\n")
            f.write("ARTICLE: " + result["article"][:1000] + "\n...\n")

        return jsonify(result)

    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    print("üü¢ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã...")
    app.run(host="0.0.0.0", port=10000)
