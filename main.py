import json
import subprocess
import os
import re
import time
from flask import Flask, request, jsonify
from openai import OpenAI
import httpx

os.environ.pop("HTTP_PROXY", None)
os.environ.pop("HTTPS_PROXY", None)
os.environ.pop("http_proxy", None)
os.environ.pop("https_proxy", None)

# üó≠Ô∏è –°–æ–∑–¥–∞—ë–º httpx –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏
no_proxy_client = httpx.Client()

# üß† –°–æ–∑–¥–∞—ë–º OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(
    api_key=os.environ.get("OPENAI_API_KEY"),
    http_client=no_proxy_client
)

ASSISTANT_ID = os.environ.get("ASSISTANT_ID")

app = Flask(__name__)

@app.route("/generate", methods=["POST"])
def generate():
    print("üì• POST-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –Ω–∞ /generate")

    try:
        try:
            data = request.get_json(force=True)
            with open("render_debug.log", "a", encoding="utf-8") as f:
                f.write(f"\n=== üì• –ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å {time.strftime('%Y-%m-%d %H:%M:%S')} ===\n")
                f.write(json.dumps(data, ensure_ascii=False, indent=2))
                
            print("üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n", data)
        except Exception as e:
            error_msg = f"\n‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {str(e)} ‚Äî {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
            print(error_msg)
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON", "details": str(e)}), 400
                   
        if not data:
            msg = f"\n‚ÄºÔ∏è –ù–µ—Ç JSON-–¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
            print(msg)
            return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400

        chunks = data.get("chunks", [])
        reference_chunk = data.get("reference_chunk", "").strip()
        previous_text = data.get("previous_text", "").strip()


        generated_blocks = {
            "element_name": "",
            "meta_title": "",
            "meta_keywords": "",
            "meta_description": "",
            "article_parts": []
        }

        accumulated_article = ""

        chunks = [c for c in chunks if isinstance(c, str) and c.strip()]
        with open("render_debug.log", "a", encoding="utf-8") as f:
            f.write(f"\n=== ‚úÖ –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∏ ({len(chunks)}): ===\n")
            for idx, c in enumerate(chunks):
                f.write(f"\n--- –ß–∞–Ω–∫ {idx} (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤): ---\n{c[:300]}\n...\n")
            
        if not chunks:
            return jsonify({"error": "–í—Å–µ —á–∞–Ω–∫–∏ –±—ã–ª–∏ –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏"}), 400

        for i, chunk in enumerate(chunks):
            print(f"\nüîÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —á–∞–Ω–∫–∞ {i}")
            thread = client.beta.threads.create()
            with open("render_debug.log", "a", encoding="utf-8") as f:
                f.write(f"\nüîÅ –ü–æ—Ç–æ–∫ {i}: —Å–æ–∑–¥–∞–Ω thread_id={thread.id}\n")

            if i == 0:
                system_prompt = (
                    "üîπ –≠—Ç–æ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å—Ç–∞—Ç—å–∏. –ù–∞—á–Ω–∏ —è—Ä–∫–æ, –∂–∏–≤–æ, –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞. –ù–µ –∑–∞–≤–µ—Ä—à–∞–π —Å—Ç–∞—Ç—å—é ‚Äî –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç.\n\n"
                )
            else:
                system_prompt = (
                    "üîπ –ü—Ä–æ–¥–æ–ª–∂–∏ —Å—Ç–∞—Ç—å—é, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —á–∞—Å—Ç—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ù–µ –¥–µ–ª–∞–π –≤—ã–≤–æ–¥–æ–≤, —Å—Ç–∞—Ç—å—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.\n\n"
                )
                if previous_text:
                    system_prompt += "=== –ü—Ä–µ–¥—ã–¥—É—â–∞—è —á–∞—Å—Ç—å —Å—Ç–∞—Ç—å–∏ ===\n" + previous_text + "\n\n"
                    
            if reference_chunk:
               system_prompt += "=== –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===\n" + reference_chunk + "\n\n"

            print(f"üìÑ –ß–∞–Ω–∫ {i}: {chunk[:200]}...\n")

            with open("render_debug.log", "a", encoding="utf-8") as f:
                f.write(f"\nüìù –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞–Ω–∫–∞ {i} –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É. prompt:\n{system_prompt[:500]}...\n")
                f.write(f"\nüîπ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞–Ω–∫–∞:\n{chunk[:1000]}...\n")

            client.beta.threads.messages.create(
                thread_id=thread.id,
                role="user",
                content=system_prompt + "\n\n" + chunk
            )

            print("üöÄ –ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
            run = client.beta.threads.runs.create(
                thread_id=thread.id,
                assistant_id=ASSISTANT_ID,
                extra_headers={"OpenAI-Beta": "assistants=v2"}
            )

            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
            while True:
                run_status = client.beta.threads.runs.retrieve(
                    thread_id=thread.id,
                    run_id=run.id
                )
                if run_status.status == "completed":
                    print("‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
                    break
                elif run_status.status == "failed":
                    raise Exception(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –∑–∞–¥–∞—á–µ–π –¥–ª—è —á–∞–Ω–∫–∞ {i}")
                time.sleep(1)

            print("üì¨ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
            messages = client.beta.threads.messages.list(thread_id=thread.id)
            if not messages.data or not messages.data[0].content:
                raise Exception(f"–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —á–∞–Ω–∫ {i}")

            with open("render_debug.log", "a", encoding="utf-8") as f:
                f.write(f"\nüì® –û—Ç–≤–µ—Ç –Ω–∞ —á–∞–Ω–∫ {i} (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):\n")
                f.write(article_part[:1000] + "\n...\n" if 'article_part' in locals() and article_part else "‚ùå article_part –ø—É—Å—Ç–æ–π\n")

            
            
            
            # üß† –ò—â–µ–º JSON-–æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –∫–ª—é—á–∞–º–∏ blocks, meta –∏ —Ç.–¥.
            content = ""
            article_part = ""
            
            for msg in messages.data:
                for item in msg.content:
                    if hasattr(item, "text") and hasattr(item.text, "value"):
                        text_value = item.text.value.strip()
                        content += text_value + "\n\n"
                        
                        try:
                            parsed = json.loads(text_value)
                            if isinstance(parsed, dict) and "blocks" in parsed:
                                print("‚úÖ –ù–∞–π–¥–µ–Ω JSON —Å –±–ª–æ–∫–∞–º–∏!")
                                
                                if i == 0:
                                    generated_blocks["element_name"] = parsed.get("element_name", "")
                                    generated_blocks["meta_title"] = parsed.get("meta_title", "")
                                    generated_blocks["meta_keywords"] = parsed.get("meta_keywords", "")
                                    generated_blocks["meta_description"] = parsed.get("meta_description", "")

                                blocks = parsed.get("blocks", {})
                                article_part = "\n\n".join(blocks.values())
                                break  # –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª

                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ JSON-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

                if article_part:
                    break

            with open("debug_chunks_output.log", "a", encoding="utf-8") as f:
                f.write(f"\n=== –ß–∞–Ω–∫ {i} ===\n{content[:1000]}\n...\n")

            def extract_block(tag, text):
                match = re.search(rf"==={tag}===\s*(.+?)(?=(?:===|$))", text, re.DOTALL)
                return match.group(1).strip() if match else ""

            
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ article_part –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ JSON ‚Üí –ø—Ä–æ–±—É–µ–º legacy-–º–µ—Ç–æ–¥
            if not article_part:
                if i == 0:
                    generated_blocks["element_name"] = extract_block("ELEMENT_NAME", content)
                    generated_blocks["meta_title"] = extract_block("META_TITLE", content)
                    generated_blocks["meta_keywords"] = extract_block("META_KEYWORDS", content)
                    generated_blocks["meta_description"] = extract_block("META_DESCRIPTION", content)
                    article_part = extract_block("ARTICLE", content)
                else:
                    article_part = extract_block("ARTICLE", content)

            generated_blocks["article_parts"].append(article_part)
            
            # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π —á–∞–Ω–∫ (index 1) –≤ accumulated_article
            if i != 1:
                accumulated_article += "\n\n" + article_part

            time.sleep(5)

        print("=== üìÖ –û–¢–í–ï–¢ –û–¢ OPENAI ===")
        print(content[:1000] + "\n...")
        print("=== üñö ===")


        with open("render_debug.log", "a", encoding="utf-8") as f:
                f.write("\n=== üì¶ –°–±–æ—Ä —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ JSON ===\n")
                f.write(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {generated_blocks['element_name']}\n")
                f.write(f"META TITLE: {generated_blocks['meta_title']}\n")
                f.write(f"ARTICLE preview: {accumulated_article[:1000]}\n...\n")
            
        result = {
            "element_name": generated_blocks["element_name"],
            "meta_title": generated_blocks["meta_title"],
            "meta_keywords": generated_blocks["meta_keywords"],
            "meta_description": generated_blocks["meta_description"],
            "article": "\n\n".join(generated_blocks["article_parts"])
        }

        with open("render_debug.log", "a", encoding="utf-8") as f:
            f.write(f"\n=== –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç {time.strftime('%Y-%m-%d %H:%M:%S')} ===\n")
            f.write(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['element_name']}\n")
            f.write(f"META TITLE: {result['meta_title']}\n")
            f.write(f"META DESC: {result['meta_description']}\n")
            f.write(f"META KEYS: {result['meta_keywords']}\n")
            f.write("ARTICLE: " + result["article"][:1000] + "\n...\n")

        return jsonify(result)

    except Exception as e:
        print(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ generate(): {str(e)}")
        return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "details": str(e)}), 500


if __name__ == "__main__":
    print("üü¢ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã...")
    app.run(host="0.0.0.0", port=10000)
